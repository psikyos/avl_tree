[general]
#遍历时显示平衡因子.1,display; 0, not display.
view_balance_factor=1
#debug参数.显示更多信息.0,未使用;1,启用.
debug=1

[deletion]
#删除结点的方法.0,recursive,递归,geek的方法; 1,iterative,迭代,基于树高,研道难的方法; 2,iterative,迭代基于规则,基于研道难修改,实现后已验证完毕20240530.
removal_method=1

#删除时,当被删结点有2个孩子时,替换方法.1,中序前驱inorder predecessor,ipd; 0,中序后继inorder successor,ios.
#https://www.cs.usfca.edu/~galles/visualization/AVLtree.html,此页面使用inorder predecessor.
replace_method_inorder=1

[insertion]
#插入方法.启用.大致有4种: 迭代法,基于规则; 迭代法,基于树高; 递归法; 递归法,基于课本;
#1.传统avl T=insert_avl_node(T,num);//取消注释生成avlcur程序
#2. T=insert_avl_node_iter_with_height(T,num);//使用树高计算bf,建立avl树
#3.insert avl tree with bf by rule. T=insert_avl_node_with_rule(T,num);//建立avl树,使用规则计算bf
#4.insert avl tree with bf by book method. T=insert_avl_node_recu_book(T,num,taller);//教科书上的avl代码
insertional_method=3